@model BoardPaySystem.Models.Floor
@{
    ViewData["Title"] = "Edit Floor";
    Layout = "_LandlordLayout";
    var building = ViewBag.Building as BoardPaySystem.Models.Building;
    if (building == null)
    {
        throw new InvalidOperationException("Building data is required");
    }
}

<div class="content-section">
    <div class="breadcrumb">
        <a asp-controller="Landlord" asp-action="ManageBuildings">Buildings</a> >
        <a asp-action="ManageFloors" asp-route-buildingId="@building.BuildingId">@building.BuildingName</a> >
        <span>Edit Floor</span>
    </div>

    <h3><i class="fas fa-edit"></i> Edit Floor</h3>

    <form asp-action="EditFloor" method="post" id="editFloorForm">
        <input type="hidden" asp-for="FloorId" />
        <input type="hidden" asp-for="BuildingId" />
        <input type="hidden" id="originalFloorName" value="@Model.FloorName" />
        <input type="hidden" id="originalFloorNumber" value="@Model.FloorNumber" />

        <div class="form-group">
            <label asp-for="FloorName">Floor Name</label>
            <input asp-for="FloorName" class="form-control" required />
            <span asp-validation-for="FloorName" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="FloorNumber">Floor Number</label>
            <input asp-for="FloorNumber" class="form-control" type="number" required />
            <span asp-validation-for="FloorNumber" class="text-danger"></span>
            <small class="form-text text-muted">
                Use 0 for Ground Floor, 1 for First Floor, etc. This helps in sorting floors.
            </small>
        </div>

        <div class="button-group">
            <button type="button" class="btn-success" id="submitButton" onclick="confirmEdit()">Save Changes</button>
            <a href="#" class="btn-secondary" onclick="confirmCancel()">Cancel</a>
        </div>
    </form>
</div>

<!-- Edit Confirmation Modal -->
<div class="modal fade" id="editConfirmModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="editConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editConfirmModalLabel">
                    <i class="fas fa-exclamation-circle text-warning"></i>
                    Confirm Changes
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to save these changes?</p>
                <div id="changesDetail" class="mt-3">
                    <p class="fw-bold mb-2">The following changes will be applied:</p>
                    <ul id="changesList" class="list-unstyled">
                        <!-- Changes will be listed here dynamically -->
                    </ul>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-secondary" data-bs-dismiss="modal">No, Keep Editing</button>
                <button type="button" class="btn-success" onclick="submitForm()">
                    <i class="fas fa-save"></i>
                    Yes, Save Changes
                </button>
            </div>
        </div>
    </div>
</div>

<!-- No Changes Modal -->
<div class="modal fade" id="noChangesModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="noChangesModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="noChangesModalLabel">
                    <i class="fas fa-info-circle text-info"></i>
                    No Changes Detected
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>No changes have been made to the floor details.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-secondary" data-bs-dismiss="modal">Continue Editing</button>
                <a asp-action="ManageFloors" asp-route-buildingId="@building.BuildingId" class="btn-primary">
                    <i class="fas fa-arrow-left"></i>
                    Return to Floors
                </a>
            </div>
        </div>
    </div>
</div>

<!-- Cancel Confirmation Modal -->
<div class="modal fade" id="cancelConfirmModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="cancelConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="cancelConfirmModalLabel">
                    <i class="fas fa-exclamation-triangle"></i>
                    Warning: Unsaved Changes
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-circle"></i>
                    You have unsaved changes that will be lost if you cancel.
                </div>
                <div id="cancelChangesList" class="mt-3">
                    <!-- Changes will be listed here dynamically -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-arrow-left"></i>
                    Continue Editing
                </button>
                <a asp-action="ManageFloors" asp-route-buildingId="@building.BuildingId" class="btn-danger">
                    <i class="fas fa-times"></i>
                    Discard Changes
                </a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        let activeModal = null;

        // Function to force cleanup all modal-related elements and styles
        function forceCleanupModals() {
            // Remove all modal backdrops first
            const backdrops = document.querySelectorAll('.modal-backdrop');
            backdrops.forEach(backdrop => {
                backdrop.classList.remove('show');
                backdrop.remove();
            });

            // Clean up body
            document.body.classList.remove('modal-open');
            document.body.style.overflow = '';
            document.body.style.paddingRight = '';

            // Reset all modals
            document.querySelectorAll('.modal').forEach(modal => {
                const bsModal = bootstrap.Modal.getInstance(modal);
                if (bsModal) {
                    bsModal.dispose();
                }
                modal.classList.remove('show');
                modal.style.display = 'none';
                modal.setAttribute('aria-hidden', 'true');
                modal.removeAttribute('aria-modal');
                modal.removeAttribute('role');
            });

            // Force remove any remaining backdrop
            const remainingBackdrops = document.querySelectorAll('.modal-backdrop');
            remainingBackdrops.forEach(backdrop => backdrop.remove());

            // Reset active modal
            activeModal = null;
        }

        document.addEventListener('DOMContentLoaded', function() {
            const modals = [
                'editConfirmModal',
                'noChangesModal',
                'cancelConfirmModal'
            ];

            // Initial cleanup
            forceCleanupModals();

            modals.forEach(modalId => {
                const modalElement = document.getElementById(modalId);
                if (!modalElement) return;

                // Initialize modal with specific options
                const modal = new bootstrap.Modal(modalElement, {
                    backdrop: false // Disable Bootstrap's backdrop handling
                });

                // Handle modal events
                modalElement.addEventListener('hidden.bs.modal', forceCleanupModals);
                modalElement.addEventListener('show.bs.modal', function() {
                    if (activeModal) {
                        activeModal.hide();
                        forceCleanupModals();
                    }
                    activeModal = modal;
                });
            });

            // Handle clicks outside modals
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('modal')) {
                    forceCleanupModals();
                }
            });

            // Handle escape key
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    forceCleanupModals();
                }
            });

            // Auto-dismiss alerts after 5 seconds
            setTimeout(function() {
                $('.alert').fadeOut('slow');
            }, 5000);

            // Ensure floor number is non-negative and a whole number
            $('#FloorNumber').on('input', function() {
                var value = $(this).val();
                if (value < 0) $(this).val(0);
                if (value.includes('.')) $(this).val(Math.floor(value));
            });
        });

        function showModal(modalId) {
            forceCleanupModals();
            const modalElement = document.getElementById(modalId);
            const modal = new bootstrap.Modal(modalElement, {
                backdrop: false
            });
            modal.show();
            activeModal = modal;
        }

        function getChanges() {
            const changes = [];
            const originalName = $("#originalFloorName").val();
            const originalNumber = $("#originalFloorNumber").val();
            const currentName = $("#FloorName").val();
            const currentNumber = $("#FloorNumber").val();

            if (originalName !== currentName) {
                changes.push(`Floor Name: "${originalName}" → "${currentName}"`);
            }
            if (originalNumber !== currentNumber) {
                changes.push(`Floor Number: ${originalNumber} → ${currentNumber}`);
            }

            return changes;
        }

        function confirmEdit() {
            if (!$("#editFloorForm").valid()) {
                return;
            }

            const changes = getChanges();
            if (changes.length === 0) {
                showModal('noChangesModal');
                return;
            }

            // Update the changes list in the modal
            const changesList = document.getElementById('changesList');
            changesList.innerHTML = changes.map(change => 
                `<li><i class="fas fa-arrow-right text-primary"></i> ${change}</li>`
            ).join('');

            showModal('editConfirmModal');
        }

        function confirmCancel() {
            const changes = getChanges();
            if (changes.length > 0) {
                // Update the changes list in the cancel modal
                const cancelChangesList = document.getElementById('cancelChangesList');
                cancelChangesList.innerHTML = changes.map(change => 
                    `<li class="mb-2">
                        <i class="fas fa-times-circle text-danger"></i>
                        ${change}
                    </li>`
                ).join('');
                showModal('cancelConfirmModal');
            } else {
                window.location.href = '@Url.Action("ManageFloors", new { buildingId = building.BuildingId })';
            }
        }

        function submitForm() {
            forceCleanupModals();
            $("#editFloorForm").submit();
        }
    </script>
} 