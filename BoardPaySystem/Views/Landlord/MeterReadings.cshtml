@model IEnumerable<BoardPaySystem.Models.MeterReading>
@{
    ViewData["Title"] = "Enter Meter Readings";
    Layout = "_LandlordLayout";
    var tenants = ViewBag.Tenants as List<BoardPaySystem.Models.ApplicationUser>;
    var readings = Model ?? new List<BoardPaySystem.Models.MeterReading>();
    var latestReadings = readings
        .GroupBy(r => r.TenantId)
        .ToDictionary(g => g.Key, g => g.OrderByDescending(r => r.ReadingDate).FirstOrDefault());
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-warning">@TempData["ErrorMessage"]</div>
}
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}

<h3><i class="fas fa-bolt"></i> Enter Meter Readings</h3>
<form id="meter-reading-form" method="post" asp-action="MeterReadings" asp-controller="Landlord">
    @Html.AntiForgeryToken()
    <div class="form-grid">
        <div class="form-group">
            <label for="reading-tenant">Select Tenant</label>
            <select id="reading-tenant" name="tenantId" required>
                <option value="" disabled selected>-- Choose Tenant --</option>
                @if (tenants != null)
                {
                    foreach (var tenant in tenants)
                    {
                        <option value="@tenant.Id" data-room="@tenant.CurrentRoom?.RoomId">@tenant.FirstName @tenant.LastName (@tenant.CurrentRoom?.Floor?.Building?.BuildingName - @tenant.CurrentRoom?.RoomNumber)</option>
                    }
                }
            </select>
        </div>
        <div class="form-group">
            <label for="reading-date">Reading Date</label>
            <input type="date" id="reading-date" name="readingDate" required />
        </div>
        <div class="form-group">
            <label for="previous-reading">Previous Reading (kWh)</label>
            <input type="number" id="previous-reading" readonly />
        </div>
        <div class="form-group">
            <label for="current-reading">Current Reading (kWh)</label>
            <input type="number" id="current-reading" name="currentReading" step="0.01" required />
            <small class="form-text text-muted">
                Enter the current meter reading in kilowatt-hours (kWh). If this is the first reading for this tenant/room, enter the value currently shown on the meter as the starting point.
            </small>
        </div>
        <div class="form-group">
            <label for="usage">Usage (kWh)</label>
            <input type="number" id="usage" readonly />
        </div>
        <div class="form-group">
            <label for="rate">Rate per kWh (₱)</label>
            <input type="number" id="rate" name="ratePerKwh" step="0.01" required value="" readonly />
        </div>
        <div class="form-group">
            <label for="charge">Charge (₱)</label>
            <input type="number" id="charge" readonly />
        </div>
        <div class="form-group">
            <label for="notes">Notes</label>
            <input type="text" id="notes" name="notes" maxlength="500" />
        </div>
    </div>
    <button type="submit" class="btn btn-primary mt-2">Record Reading</button>
    <p id="add-reading-message" class="message success"></p>
</form>

@* <h4 class="mt-4">Recent Readings</h4>
<table class="table table-sm table-striped">
    <thead>
        <tr>
            <th>Date</th>
            <th>Tenant</th>
            <th>Room</th>
            <th>Previous</th>
            <th>Current</th>
            <th>Usage</th>
            <th>Rate</th>
            <th>Charge</th>
            <th>Notes</th>
        </tr>
    </thead>
    <tbody id="readings-table-body">
        @foreach (var reading in readings.OrderByDescending(r => r.ReadingDate).Take(20))
        {
            <tr>
                <td>@reading.ReadingDate.ToString("yyyy-MM-dd")</td>
                <td>@reading.Tenant?.FirstName @reading.Tenant?.LastName</td>
                <td>@reading.Room?.Floor?.Building?.BuildingName - @reading.Room?.RoomNumber</td>
                <td>@reading.PreviousReading</td>
                <td>@reading.CurrentReading</td>
                <td>@reading.UsageKwh</td>
                <td>@reading.RatePerKwh</td>
                <td>@reading.TotalCharge.ToString("C")</td>
                <td>@reading.Notes</td>
            </tr>
        }
    </tbody>
</table> *@

@section Scripts {
<script>
document.addEventListener('DOMContentLoaded', function() {
    let previousReadings = {};
    let ratePerKwh = 12;
    @foreach (var kvp in latestReadings)
    {
        if (kvp.Value != null)
        {
            <text>previousReadings['@kvp.Key'] = @kvp.Value.CurrentReading;</text>
        }
    }
    let tenantRates = {};
    @if (ViewBag.TenantRates != null)
    {
        foreach (var kvp in (Dictionary<string, decimal>)ViewBag.TenantRates)
        {
            <text>tenantRates['@kvp.Key'] = @kvp.Value;</text>
        }
    }
    document.getElementById('reading-tenant').addEventListener('change', function() {
        var tenantId = this.value;
        var prev = previousReadings[tenantId] || 0;
        document.getElementById('previous-reading').value = prev;
        document.getElementById('current-reading').value = '';
        document.getElementById('usage').value = '';
        document.getElementById('charge').value = '';
        document.getElementById('rate').value = tenantRates[tenantId] || '';
    });
    document.getElementById('current-reading').addEventListener('input', function() {
        var prev = parseFloat(document.getElementById('previous-reading').value) || 0;
        var curr = parseFloat(this.value) || 0;
        // If this is the first reading (no previous), do not calculate usage/charge
        if (prev === 0) {
            document.getElementById('usage').value = '';
            document.getElementById('charge').value = '';
            document.getElementById('add-reading-message').textContent = 'This will be set as the starting reading. No charge will be calculated.';
            document.getElementById('add-reading-message').classList.remove('text-danger');
            return;
        }
        var usage = curr - prev;
        if (usage < 0) {
            document.getElementById('add-reading-message').textContent = 'Current reading cannot be less than previous.';
            document.getElementById('add-reading-message').classList.add('text-danger');
            document.getElementById('usage').value = '';
            document.getElementById('charge').value = '';
            return;
        } else {
            document.getElementById('add-reading-message').textContent = '';
            document.getElementById('add-reading-message').classList.remove('text-danger');
        }
        document.getElementById('usage').value = usage;
        var rate = parseFloat(document.getElementById('rate').value) || ratePerKwh;
        document.getElementById('charge').value = usage * rate;
    });
    document.getElementById('rate').addEventListener('input', function() {
        var usage = parseFloat(document.getElementById('usage').value) || 0;
        var rate = parseFloat(this.value) || ratePerKwh;
        document.getElementById('charge').value = usage * rate;
    });
    // Auto-select tenant if tenantId is in query string
    const urlParams = new URLSearchParams(window.location.search);
    const preselectTenantId = urlParams.get('tenantId');
    if (preselectTenantId) {
        const tenantDropdown = document.getElementById('reading-tenant');
        if (tenantDropdown) {
            tenantDropdown.value = preselectTenantId;
            tenantDropdown.dispatchEvent(new Event('change'));
        }
    }
});
</script>
}